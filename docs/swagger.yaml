basePath: /api/v1
definitions:
  domain.Manga:
    properties:
      author:
        type: string
      coverImageURL:
        description: Use a pointer to handle NULL values
        type: string
      createdAt:
        type: string
      description:
        type: string
      genres:
        items:
          type: string
        type: array
      id:
        type: string
      status:
        $ref: '#/definitions/domain.MangaStatus'
      title:
        type: string
      updatedAt:
        type: string
    type: object
  domain.MangaStatus:
    enum:
    - ongoing
    - completed
    - hiatus
    - cancelled
    type: string
    x-enum-varnames:
    - StatusOngoing
    - StatusCompleted
    - StatusHiatus
    - StatusCancelled
  handler.createMangaRequest:
    properties:
      author:
        maxLength: 100
        minLength: 2
        type: string
      description:
        type: string
      genres:
        items:
          type: string
        minItems: 1
        type: array
      status:
        enum:
        - ongoing
        - completed
        - hiatus
        - cancelled
        type: string
      title:
        maxLength: 255
        minLength: 2
        type: string
    required:
    - author
    - description
    - genres
    - status
    - title
    type: object
  handler.loginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  handler.loginResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  handler.registerRequest:
    properties:
      email:
        type: string
      password:
        maxLength: 72
        minLength: 8
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  handler.userResponse:
    properties:
      email:
        type: string
      id:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a production-ready HTTP API in Go for a manga reading platform.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Manga-Dex-Style API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns JWT access and refresh tokens.
      parameters:
      - description: Login Credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.loginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.loginResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Log in a user
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Creates a new user account with a default 'User' role.
      parameters:
      - description: Registration Info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.registerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.userResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a new user
      tags:
      - Auth
  /manga:
    get:
      description: Retrieves a paginated and filtered list of manga.
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: per_page
        type: integer
      - description: Filter by title (case-insensitive, partial match)
        in: query
        name: title
        type: string
      - description: Filter by comma-separated genre names (e.g., Action,Fantasy)
        in: query
        name: genres
        type: string
      - description: Filter by status
        enum:
        - ongoing
        - completed
        - hiatus
        - cancelled
        in: query
        name: status
        type: string
      - description: Sort order (e.g., title, -created_at)
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Manga'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: List manga
      tags:
      - Manga
    post:
      consumes:
      - application/json
      description: Adds a new manga to the catalog. Requires 'manga:manage' permission.
      parameters:
      - description: Manga Creation Info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.createMangaRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Manga'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new manga
      tags:
      - Manga
  /manga/{id}:
    get:
      description: Retrieves details for a single manga, including its genres.
      parameters:
      - description: Manga ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Manga'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a single manga by ID
      tags:
      - Manga
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and a JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
