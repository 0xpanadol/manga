basePath: /api/v1
definitions:
  domain.Chapter:
    properties:
      chapterNumber:
        type: string
      createdAt:
        type: string
      id:
        type: string
      mangaID:
        type: string
      pages:
        items:
          type: string
        type: array
      title:
        description: Optional
        type: string
      updatedAt:
        type: string
    type: object
  domain.Comment:
    properties:
      chapterID:
        description: Nullable
        type: string
      content:
        type: string
      createdAt:
        type: string
      id:
        type: string
      mangaID:
        description: Nullable
        type: string
      updatedAt:
        type: string
      userID:
        type: string
    type: object
  domain.CommentWithUser:
    properties:
      chapterID:
        description: Nullable
        type: string
      content:
        type: string
      createdAt:
        type: string
      id:
        type: string
      mangaID:
        description: Nullable
        type: string
      updatedAt:
        type: string
      userID:
        type: string
      username:
        type: string
    type: object
  domain.Manga:
    properties:
      author:
        type: string
      coverImageURL:
        description: Use a pointer to handle NULL values
        type: string
      createdAt:
        type: string
      description:
        type: string
      genres:
        items:
          type: string
        type: array
      id:
        type: string
      status:
        $ref: '#/definitions/domain.MangaStatus'
      title:
        type: string
      updatedAt:
        type: string
    type: object
  domain.MangaStatus:
    enum:
    - ongoing
    - completed
    - hiatus
    - cancelled
    type: string
    x-enum-varnames:
    - StatusOngoing
    - StatusCompleted
    - StatusHiatus
    - StatusCancelled
  handler.createChapterRequest:
    properties:
      chapter_number:
        maxLength: 20
        type: string
      pages:
        description: Initially, pages might be empty before upload
        items:
          type: string
        type: array
      title:
        maxLength: 255
        type: string
    required:
    - chapter_number
    type: object
  handler.createCommentRequest:
    properties:
      content:
        maxLength: 1000
        minLength: 1
        type: string
    required:
    - content
    type: object
  handler.createMangaRequest:
    properties:
      author:
        maxLength: 100
        minLength: 2
        type: string
      description:
        type: string
      genres:
        items:
          type: string
        minItems: 1
        type: array
      status:
        enum:
        - ongoing
        - completed
        - hiatus
        - cancelled
        type: string
      title:
        maxLength: 255
        minLength: 2
        type: string
    required:
    - author
    - description
    - genres
    - status
    - title
    type: object
  handler.loginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  handler.loginResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  handler.registerRequest:
    properties:
      email:
        type: string
      password:
        maxLength: 72
        minLength: 8
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  handler.userResponse:
    properties:
      email:
        type: string
      id:
        type: string
      username:
        type: string
    type: object
  repository.ToggleFavoriteResult:
    properties:
      isFavorited:
        description: True if the manga is now a favorite, false if it was removed.
        type: boolean
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a production-ready HTTP API in Go for a manga reading platform.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Manga-Dex-Style API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns JWT access and refresh tokens.
      parameters:
      - description: Login Credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.loginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.loginResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Log in a user
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Creates a new user account with a default 'User' role.
      parameters:
      - description: Registration Info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.registerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.userResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a new user
      tags:
      - Auth
  /chapters/{id}:
    delete:
      description: Deletes a specific chapter. Requires 'chapters:manage' permission.
      parameters:
      - description: Chapter ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a chapter
      tags:
      - Chapters
    get:
      description: Retrieves details for a single chapter.
      parameters:
      - description: Chapter ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Chapter'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a single chapter by ID
      tags:
      - Chapters
    put:
      consumes:
      - application/json
      description: Updates the details of a specific chapter. Requires 'chapters:manage'
        permission.
      parameters:
      - description: Chapter ID
        in: path
        name: id
        required: true
        type: string
      - description: Chapter Update Info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.createChapterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Chapter'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update a chapter
      tags:
      - Chapters
  /chapters/{id}/comments:
    get:
      description: Retrieves a paginated list of comments for a specific chapter.
      parameters:
      - description: Chapter ID
        in: path
        name: id
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: per_page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.CommentWithUser'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: List chapter comments
      tags:
      - Social
    post:
      consumes:
      - application/json
      description: Adds a new comment to a specific chapter.
      parameters:
      - description: Chapter ID
        in: path
        name: id
        required: true
        type: string
      - description: Comment Content
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.createCommentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Comment'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Post a comment on a chapter
      tags:
      - Social
  /chapters/{id}/pages:
    post:
      consumes:
      - multipart/form-data
      description: Uploads one or more image files for a chapter. Requires 'chapters:manage'
        permission.
      parameters:
      - description: Chapter ID
        in: path
        name: id
        required: true
        type: string
      - description: Image files for the chapter pages. Can be sent multiple times.
        in: formData
        name: pages
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Upload chapter pages
      tags:
      - Chapters
  /chapters/{id}/progress:
    post:
      description: Marks a chapter as read for the current user.
      parameters:
      - description: Chapter ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Mark chapter as read
      tags:
      - Social
  /manga:
    get:
      description: Retrieves a paginated and filtered list of manga.
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: per_page
        type: integer
      - description: Full-text search query for title and description
        in: query
        name: q
        type: string
      - description: Filter by comma-separated genre names (e.g., Action,Fantasy)
        in: query
        name: genres
        type: string
      - description: Filter by status
        enum:
        - ongoing
        - completed
        - hiatus
        - cancelled
        in: query
        name: status
        type: string
      - description: Sort order (e.g., title, -created_at)
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Manga'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: List manga
      tags:
      - Manga
    post:
      consumes:
      - application/json
      description: Adds a new manga to the catalog. Requires 'manga:manage' permission.
      parameters:
      - description: Manga Creation Info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.createMangaRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Manga'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new manga
      tags:
      - Manga
  /manga/{id}:
    get:
      description: Retrieves details for a single manga, including its genres.
      parameters:
      - description: Manga ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Manga'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a single manga by ID
      tags:
      - Manga
  /manga/{id}/comments:
    get:
      description: Retrieves a paginated list of comments for a specific manga.
      parameters:
      - description: Manga ID
        in: path
        name: id
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: per_page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.CommentWithUser'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: List manga comments
      tags:
      - Social
    post:
      consumes:
      - application/json
      description: Adds a new comment to a specific manga.
      parameters:
      - description: Manga ID
        in: path
        name: id
        required: true
        type: string
      - description: Comment Content
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.createCommentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Comment'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Post a comment on a manga
      tags:
      - Social
  /manga/{id}/favorite:
    post:
      description: Adds or removes a manga from the current user's favorites list.
      parameters:
      - description: Manga ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/repository.ToggleFavoriteResult'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Toggle manga favorite status
      tags:
      - Social
  /manga/{manga_id}/chapters:
    get:
      description: Retrieves a paginated list of chapters for a specific manga.
      parameters:
      - description: Manga ID
        in: path
        name: manga_id
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: per_page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Chapter'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: List chapters for a manga
      tags:
      - Chapters
    post:
      consumes:
      - application/json
      description: Adds a new chapter to a specific manga. Requires 'chapters:manage'
        permission.
      parameters:
      - description: Manga ID
        in: path
        name: manga_id
        required: true
        type: string
      - description: Chapter Creation Info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.createChapterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Chapter'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new chapter
      tags:
      - Chapters
  /users/me:
    get:
      description: Retrieves the profile information for the currently authenticated
        user.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.userResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get current user's profile
      tags:
      - Users
  /users/me/favorites:
    get:
      description: Retrieves a paginated list of the current user's favorite manga.
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: per_page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Manga'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List user's favorite manga
      tags:
      - Social
  /users/me/progress:
    get:
      description: Retrieves a list of all chapters marked as read by the current
        user.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Chapter'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List user's read chapters
      tags:
      - Social
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and a JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
